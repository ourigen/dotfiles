" =================================================
" File: init.vim
" Maintainer: ourigen <https://github.com/ourigen>
" Description: Base configuration for Neovim
" License: GNU General Public License
" ================================================

packadd! nvim-lspconfig
    packadd! lspkind-nvim
packadd! orgmode.nvim
    packadd! org-bullets.nvim
packadd! telescope.nvim
    packadd! popup.nvim
    packadd! plenary.nvim
    packadd! telescope-fzf-native.nvim

packadd! nvim-treesitter
    " packadd! nvim-treesitter-refactor
    " packadd! nvim-treesitter-textobjects
packadd! gitsigns.nvim
packadd! nvim-colorizer.lua
packadd! nvim-compe
    packadd! nvim-autopairs
packadd! vim-vsnip
" packadd! LuaSnip
packadd! tokyonight.nvim
packadd! zen-mode.nvim
packadd! lualine.nvim
packadd! nvim-bufferline.lua
packadd! nvim-tree.lua
    packadd! nvim-web-devicons
packadd! iron.nvim
" packadd! surround.nvim
" packadd! vim-sandwich
packadd! vim-surround
packadd! kommentary
packadd! vim-cool
packadd! targets.vim
" packadd! vim-lion
packadd! vim-exchange
packadd! vim-markdown
" packadd! vimtex
" packadd! csv.vim

helptags ALL

" Disable extra plugins/checks
let g:python_host_skip_check = 1
if executable('python')
    let g:python_host_prog  = exepath('python')
    let g:python3_host_prog = exepath('python3')
else
    let g:loaded_python_provider = 0
    let g:loaded_python3_provider = 0
endif
let g:loaded_node_provider = 0
let g:loaded_ruby_provider = 0
let g:loaded_perl_provider = 0
let g:loaded_gzip          = 1
let g:loaded_tarPlugin     = 1
let g:loaded_tar           = 1
let g:loaded_zipPlugin     = 1
let g:loaded_zip           = 1

" SETTINGS {{{
set mouse=nv " enable mouse support for modes: normal, visual
set title
set titlestring=%t\ -\ Neovim                 " title of the terminal window
set laststatus=2                              " always show statusline on last window
set termguicolors                             " use gui :highlight attributes instead of cterm attributes
set nojoinspaces                              " insert only one spaces after a '.', '?' and '!' with a join command
set formatoptions+=n                          " when formatting text, recognize numbered lists
" set timeoutlen=250                            " time in milliseconds to wait for a mapped sequence to complete.
set scrolloff=3                               " minimal screen lines to keep above and below cursor
set number                                    " print line number in front of each line
set relativenumber                            " show line number relative to cursor line in front of each line
set splitbelow                                " :split will put new window below current
set splitright                                " :vsplit will put new window right of current one
" set textwidth=120                             " maximum width of text that is being inserted
set synmaxcol=1000                     " maximum column in which to search for syntax items
set linebreak                                 " wrap long lines at a character in 'breakat'
set breakindent                               " every wrapped line will continue visually indented
" set showbreak=↳                       " string to put at start of lines that have been wrapped
set ignorecase                                " ignore case in search patterns
set smartcase                                 " override (but requires) 'ignorecase' if search pattern contains upper case characters
set inccommand=nosplit                        " shows effects of a command incrementally, as you type
set foldmethod=marker                         " folds are defined by {{{ }}} markers
" set foldmethod=expr
" set foldexpr=nvim_treesitter#foldexpr()
" set foldmethod=indent                 " folds are automatically defined by indent of lines
set conceallevel=2                            " concealed text is hidden unless a custom replacement character is defined
set tabstop=4                                 " spaces a <Tab> counts for
set shiftwidth=0                              " use 'tabstop' amount for each step of (auto)indent ('cindent', >>, <<)
set completeopt=menuone                       " use popup menu even when there is only one match
set completeopt+=noselect                     " Do not select a match in menu
set completeopt+=noinsert                     " Do not insert any text until user selects
" set complete+=d                       " scan current and included files for defined name or macro
" set complete+=kspell                  " use currently active spell checking
set complete-=u                               " don't scan unloaded buffers in buffers list
set complete-=b                               " don't scan loaded buffers in buffers list
set switchbuf=usetab                          " try to reuse windows/tabs when switching buffers
set diffopt+=vertical                         " start diff mode with vertical splits
set diffopt+=foldcolumn:0                     " don't show fold column in diff view
set noshowmode                                " hides -- INSERT/REPLACE/VISUAL -- message on last line
" set noshowcmd                         " don't show command in lower right corner of screen
set gdefault                                  " all matches in a line are substituted
set fillchars=diff:·                          " character for deleted lines of 'diff' option
set fillchars+=eob:\                          " character for empty lines at end of a buffer
set list                                      " show tabs, end of line, trailing spaces, etc.
set listchars=tab:│\                          " two or three characters to be used to show a tab.
set listchars+=eol:¬                          " character to show at end of each line
set listchars+=extends:›                      " character to show in last column, when 'wrap' is off
set listchars+=precedes:‹                     " character to show in first column, when 'wrap' is off
set listchars+=trail:·                        " character to show for trailing spaces
set pumheight=25                              " maximum number of items to show in completion popup
set cursorline                                " highlight line of cursor
set lazyredraw                                " don't redraw screen macros, registers and commands that haven't been typed
set hidden                                    " buffer becomes hidden when it's abandoned
set clipboard=unnamedplus                     " prepend clipboard register '+' for all yank, delete, change and put operations
set dictionary+=/usr/share/dict/words         " files used for keyword completion i_CTRL-X_CTRL-K
if exists('g:ale_completion_enabled')
    set omnifunc=ale#completion#OmniFunc
else
    set omnifunc=syntaxcomplete#Complete      " used for omni completion i_CTRL-X_CTRL-O
endif

" searched using gf, [f, ]f, ^Wf, :find, :sfind, :tabfind commands
" ** matches up to 30 directories (only) deep
set path-=/usr/include
set path+=~/documents/**
set path+=~/courses/**
set path+=~/projects/**
set path+=~/.config/**5                       " limits to max depth of 5 subdirectories
set path+=~/.local/bin/**3

set wildmode=longest:full                     " complete till longest common string but also start wildmenu
set wildmode+=full                            " complete the next full match

" ignored when expanding wildcards, completing file/directory names
set wildignore+=*.aux,*.out,*.toc,*.log,*.fdb_latexmk,*.fls,*.synctex.gz
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.docx,*.pptx,*.xlsx,*.pdf
set wildignore+=*.git,*.hg,*.svn
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.mp3,*.oga,*.ogg,*.wav,*.flac,*.mpeg
set wildignore+=*.eot,*.otf,*.ttf,*.woff

set wildignorecase                            " case ignored when completing files/directories
" set guicursor=                        " disable cursor-styling
set virtualedit=block                         " cursor can be positioned where there's no actual character in Visual block mode.
set shortmess+=m                              " use [+] instead of [Modified]
set shortmess+=r                              " use [RO] instead of [readonly]
set shortmess+=I                              " don't give intro message when starting Vim
set shortmess+=A                              " don't give ATTENTION message when an existing swap file
set shortmess+=c                              " don't give ins-completion-menu messages
set shada='20,<50,s10                         " store maximum marks for 20 file, 50 lines per register, 10KiB size
set undofile                                  " automatically saves persistent undo history
set undolevels=500                            " maximum number of changes that can be undone

if exists('$SUDO_USER')
    set nobackup " don't keep a backup file at all
    set nowritebackup
    set noswapfile
endif

if executable('rg')
    set grepprg=rg\ --no-heading\ --smart-case\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif
" }}}

" MAPPINGS {{{
nnoremap ]b :bnext<CR>
nnoremap [b :bprev<CR>
nnoremap ]l :lnext<CR>
nnoremap [l :lprev<CR>
nnoremap ]q :cnext<CR>
nnoremap [q :cprev<CR>
nnoremap ]Q :cnfile<CR>
nnoremap [Q :cpfile<CR>
nnoremap ]l :lnext<CR>
nnoremap [l :lprev<CR>
nnoremap ]L :lnfile<CR>
nnoremap [L :lpfile<CR>

" TODO: Combine git_files and find_files
nnoremap <Space>f :Telescope find_files hidden=true<CR>
nnoremap <Space>g :Telescope git_files<CR>
nnoremap <Space>b :Telescope buffers<CR>
nnoremap <Space>r :Telescope live_grep<CR>
nnoremap <Space>h :Telescope help_tags<CR>
nnoremap <Space>s :Telescope lsp_workspace_symbols<CR>
nnoremap <Space>i :IronRepl<CR>
nnoremap <Space>n :NvimTreeToggle<CR>

" nnoremap <Space> za
" nnoremap <Space>s :%s //
" vnoremap <Space>s :s //
nnoremap <Space>e :e $MYVIMRC<CR>
nnoremap <Space><CR>  :split \| terminal<cr>i

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

nnoremap <expr> n (v:searchforward ? 'n' : 'N') . 'zzzv'
nnoremap <expr> N (v:searchforward ? 'N' : 'n') . 'zzzv'
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
xnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
xnoremap <expr> k (v:count == 0 ? 'gk' : 'k')

nnoremap zp zMzvzz
nnoremap vv ^vg_
nnoremap g= gg=G``
" visual selection around folds
nnoremap vaz v[zo]z$
" visual selection in folds
nnoremap viz v[zj0o]z$k
" gF is same as gf but follows line number
nnoremap gf gF
nnoremap Y y$
" <C-u> Remove all characters between cursor position and beginning of line.
nnoremap sl :<C-u>call utils#Breakline()<CR>
nnoremap gl :<C-u>call utils#Align()<CR>
nnoremap ss :<C-u>call utils#TrimTrailing()<CR>

" create undo break when typing .,?! (for prose)
inoremap . .<C-g>u
inoremap , ,<C-g>u
inoremap ? ?<C-g>u
inoremap ! !<C-g>u

" smartcase */#
nnoremap <silent> * :let @/='\v<'.expand('<cword>').'>'<CR>:let v:searchforward=1<CR>n
nnoremap <silent> # :let @/='\v<'.expand('<cword>').'>'<CR>:let v:searchforward=0<CR>n
nnoremap <silent> g* :let @/='\v'.expand('<cword>')<CR>:let v:searchforward=1<CR>n
nnoremap <silent> g# :let @/='\v'.expand('<cword>')<CR>:let v:searchforward=0<CR>n

" visual */# selection
xnoremap * <C-c>/<C-r>=utils#Visualstar()<CR><CR>
xnoremap # <C-c>?<C-r>=utils#Visualstar()<CR><CR>

" dot-repeatable changes
nnoremap c* *``cgn
nnoremap c# *``cgN
nnoremap cg* g*``cgn
nnoremap cg# g*``cgN
nnoremap d*   *``dgn
nnoremap d#   *``dgN
nnoremap dg* g*``dgn
nnoremap dg# g*``dgN

" https://noahfrederick.com/log/vim-streamlining-grep
cnoreabbrev <expr> grep  (getcmdtype() ==# ':' && getcmdline() =~# '^grep')  ? 'silent grep'  : 'grep'
cnoreabbrev <expr> lgrep (getcmdtype() ==# ':' && getcmdline() =~# '^lgrep') ? 'silent lgrep' : 'lgrep'

" Tab through searches
" set wildcharm=<C-z>
" cnoremap <expr> <Tab> getcmdtype() =~ '[?/]' ? '<C-g>' : '<Tab>'
" cnoremap <expr> <S-Tab> getcmdtype() =~ '[?/]' ? '<C-t>' : '<S-Tab>'

" }}}

" AUTOCMDS {{{
" augroup WinResize
" 	autocmd!
" 	autocmd VimResized * wincmd =
" augroup END

augroup FtOpen
	autocmd!
	autocmd BufRead *.png,*.jpg,*.pdf silent execute "!xdg-open " . shellescape(expand("%:p")) . ' &' | bd | let &ft=&ft
augroup END

augroup NvimTerm
    autocmd!
    autocmd BufWinEnter,WinEnter term://* startinsert
    autocmd BufLeave term://* stopinsert
    autocmd TermOpen * setlocal nonumber
    autocmd TermOpen * setlocal norelativenumber
augroup end

augroup GrepQf
    autocmd!
    " open quickfix window when :grep is called
    autocmd QuickFixCmdPost grep cwindow 10
    autocmd QuickFixCmdPost lgrep lwindow 10
    " open quickfix window when qf command (ie. :make) is called
    autocmd QuickFixCmdPost [^l]* cwindow 10
augroup END
" }}}
